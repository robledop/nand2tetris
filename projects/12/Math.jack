// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;
    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(15);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;

        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }

        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        /*
            multiply (x, y):
                sum = 0
                shiftedX = x
                for i = 0 ... w - 1 do
                    if ((i'th bit of y) == 1)
                        sum = sum + shiftedX
                    shiftedX = shiftedX * 2
                return sum
        */

        var int i, sum, shiftedX;
        let sum = 0;
        let shiftedX = x;
        let i = 0;

        while (i < 16) {
            if (Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            
            let i = i + 1;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        /*
            if (x > y) return 0
            q = divide(x, 2 * y)
            if ((x - 2 * q * y) < y)
                return 2 * q
            else
                return 2 * q + 1
        */

        var int q, absX, absY, result;
        let absX = Math.abs(x);
        let absY = Math.abs(y);

        if (absY > absX) {
           return 0;
        }

        let q = Math.divide(absX, absY + absY);
        if ((absX - (2 * q * absY)) < absY) {
            let result =  q + q;
        }else{
            let result =  q + q + 1;
        }

        if (result < 0) {
            return 0;
        }

        if (((x < 0) = (y < 0))) {
            return result;
        }
        return -result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        /*
            sqrt (x):
                y = 0
                for j = n/2 -1 ...0 do
                    if (y + 2^j)^2 <= x then y = y + 2^j

            return y
        */

        var int j, y, test;
        let j = 7;  // (16 / 2) - 1
        let y = 0;

        while (~(j < 0)) {
            let test = Math.power(y + twoToThe[j], 2);
            if (~(test > x) & (test > 0)) {
                let y = y + twoToThe[j];
            }

            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }

        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }

        return b;
    }

    // Returns true if the i-th bit of x is 1, false otherwise
    function boolean bit(int x, int i){
        var int bit;
        let bit = x & twoToThe[i];

        return ~(bit = 0);
    }

    // return x^y
    function int power(int x, int pow) {
        var int i, result;
        let i = 1;
        let result = x;
        
        if (pow = 0) {
            return 1;
        }

        if (pow = 1) {
            return x;
        }

        while (~(i = pow)) {
            let result = result * x;
            let i = i + 1;
        }

        return result;
    }
}
