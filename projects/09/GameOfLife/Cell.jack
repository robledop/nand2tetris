class Cell 
{
  field boolean _isAlive;
  field boolean _isAliveNext;
  field Array _neighbors;

  // Is this cell currently alive?
  method boolean getIsAlive() 
  {
    return _isAlive;
  }

  // Will this cell be alive on the next generation?
  method boolean getIsAliveNext() 
  {
    return _isAliveNext;
  }

  constructor Cell new()
  {
    let _neighbors = Array.new(8);
    return this;
  }

  method void setIsAlive(boolean isAlive) 
  {
    let _isAlive = isAlive;
    return;
  }

  method void setNeighbor(int index, Cell neighbor)
  {
    let _neighbors[index] = neighbor;
    return;
  }

  // Determine whether this cell will be alive in the next generation.
  method void determineNextLiveState()
  {
    var Cell currentNeighbor;
    var int liveNeighbors, i;
    
    let liveNeighbors = 0;
    let i = 0;
    while(i < 8)
    {
      let currentNeighbor = _neighbors[i];
      if(currentNeighbor.getIsAlive())
      {
        let liveNeighbors = liveNeighbors + 1;
      }
      let i = i + 1;
    }

    // Any live cell with fewer than two live neighbours dies, as if by underpopulation.
    // Any live cell with two or three live neighbours lives on to the next generation.
    // Any live cell with more than three live neighbours dies, as if by overpopulation.
    // Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.

    if (_isAlive)
    {
      let _isAliveNext = ((liveNeighbors = 2) | (liveNeighbors = 3));
    }
    else
    {
      let _isAliveNext = (liveNeighbors = 3);
    }

    return;
  }

  // Advances the cell to the next generation.
  method void advance()
  {
    let _isAlive = _isAliveNext;
    return;
  }

  method void dispose() 
  {
    do Memory.deAlloc(_neighbors);
    do Memory.deAlloc(this);
    return;
  }
}