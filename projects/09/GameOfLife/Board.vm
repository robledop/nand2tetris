function Board.new 3
push constant 4
call Memory.alloc 1
pop pointer 0
push argument 0
push argument 2
call Math.divide 2
pop this 2
push argument 1
push argument 2
call Math.divide 2
pop this 1
push argument 2
pop this 0
push this 2
call Array.new 1
pop this 3
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 1
lt
not
if-goto WHILE_END0
push local 0
push this 3
add
push this 1
call Array.new 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 0
label WHILE_EXP1
push local 0
push this 2
lt
not
if-goto WHILE_END1
push constant 0
pop local 1
push local 0
push this 3
add
pop pointer 1
push that 0
pop local 2
label WHILE_EXP2
push local 1
push this 1
lt
not
if-goto WHILE_END2
push local 1
push local 2
add
call Cell.new 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP2
label WHILE_END2
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
push pointer 0
push argument 3
call Board.connectNeighbors 2
pop temp 0
push pointer 0
return
function Board.connectNeighbors 16
push argument 0
pop pointer 0
push constant 0
pop local 14
label WHILE_EXP0
push local 14
push this 2
lt
not
if-goto WHILE_END0
push constant 0
pop local 15
label WHILE_EXP1
push local 15
push this 1
lt
not
if-goto WHILE_END1
push local 14
push constant 0
eq
pop local 5
push local 14
push this 2
push constant 1
sub
eq
pop local 6
push local 15
push constant 0
eq
pop local 7
push local 15
push this 1
push constant 1
sub
eq
pop local 8
push local 5
push local 6
or
push local 7
or
push local 8
or
pop local 9
push local 5
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 2
push constant 1
sub
pop local 10
goto IF_END0
label IF_FALSE0
push local 14
push constant 1
sub
pop local 10
label IF_END0
push local 6
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
pop local 11
goto IF_END1
label IF_FALSE1
push local 14
push constant 1
add
pop local 11
label IF_END1
push local 7
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push this 1
push constant 1
sub
pop local 12
goto IF_END2
label IF_FALSE2
push local 15
push constant 1
sub
pop local 12
label IF_END2
push local 8
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 0
pop local 13
goto IF_END3
label IF_FALSE3
push local 15
push constant 1
add
pop local 13
label IF_END3
push local 14
push this 3
add
pop pointer 1
push that 0
pop local 0
push local 15
push local 0
add
pop pointer 1
push that 0
pop local 1
push local 10
push this 3
add
pop pointer 1
push that 0
pop local 3
push local 12
push local 3
add
pop pointer 1
push that 0
pop local 4
push local 1
push constant 0
push local 4
call Cell.setNeighbor 3
pop temp 0
push local 14
push this 3
add
pop pointer 1
push that 0
pop local 3
push local 12
push local 3
add
pop pointer 1
push that 0
pop local 4
push local 1
push constant 1
push local 4
call Cell.setNeighbor 3
pop temp 0
push local 11
push this 3
add
pop pointer 1
push that 0
pop local 3
push local 12
push local 3
add
pop pointer 1
push that 0
pop local 4
push local 1
push constant 2
push local 4
call Cell.setNeighbor 3
pop temp 0
push local 10
push this 3
add
pop pointer 1
push that 0
pop local 3
push local 15
push local 3
add
pop pointer 1
push that 0
pop local 4
push local 1
push constant 3
push local 4
call Cell.setNeighbor 3
pop temp 0
push local 11
push this 3
add
pop pointer 1
push that 0
pop local 3
push local 15
push local 3
add
pop pointer 1
push that 0
pop local 4
push local 1
push constant 4
push local 4
call Cell.setNeighbor 3
pop temp 0
push local 10
push this 3
add
pop pointer 1
push that 0
pop local 3
push local 13
push local 3
add
pop pointer 1
push that 0
pop local 4
push local 1
push constant 5
push local 4
call Cell.setNeighbor 3
pop temp 0
push local 14
push this 3
add
pop pointer 1
push that 0
pop local 3
push local 13
push local 3
add
pop pointer 1
push that 0
pop local 4
push local 1
push constant 6
push local 4
call Cell.setNeighbor 3
pop temp 0
push local 11
push this 3
add
pop pointer 1
push that 0
pop local 3
push local 13
push local 3
add
pop pointer 1
push that 0
pop local 4
push local 1
push constant 7
push local 4
call Cell.setNeighbor 3
pop temp 0
push local 15
push constant 1
add
pop local 15
goto WHILE_EXP1
label WHILE_END1
push local 14
push constant 1
add
pop local 14
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Board.draw 4
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 2
lt
not
if-goto WHILE_END0
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push this 1
lt
not
if-goto WHILE_END1
push local 0
push this 3
add
pop pointer 1
push that 0
pop local 2
push local 1
push local 2
add
pop pointer 1
push that 0
pop local 3
push pointer 0
push local 0
push local 1
push local 3
call Cell.getIsAlive 1
call Board.drawCell 4
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Board.drawCell 0
push argument 0
pop pointer 0
push argument 3
call Screen.setColor 1
pop temp 0
push constant 255
push argument 1
push constant 16
call Math.multiply 2
add
push argument 2
push constant 16
call Math.multiply 2
push constant 255
push argument 1
push constant 16
call Math.multiply 2
add
push constant 14
add
push constant 14
push argument 2
push constant 16
call Math.multiply 2
add
call Screen.drawRectangle 4
pop temp 0
push constant 0
return
function Board.randomize 6
push argument 0
pop pointer 0
call Random.rand 0
pop local 0
push local 0
call Random.setSeed 1
pop temp 0
push constant 0
pop local 1
label WHILE_EXP0
push local 1
push this 2
lt
not
if-goto WHILE_END0
push constant 0
pop local 2
label WHILE_EXP1
push local 2
push this 1
lt
not
if-goto WHILE_END1
push local 1
push this 3
add
pop pointer 1
push that 0
pop local 4
push local 2
push local 4
add
pop pointer 1
push that 0
pop local 5
push local 0
call Random.setSeed 1
pop temp 0
call Random.rand 0
pop local 0
push local 0
push constant 15000
lt
pop local 3
push local 5
push local 3
call Cell.setIsAlive 2
pop temp 0
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP1
label WHILE_END1
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Board.advance 9
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 2
lt
not
if-goto WHILE_END0
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push this 1
lt
not
if-goto WHILE_END1
push local 0
push constant 0
eq
pop local 4
push local 0
push this 2
push constant 1
sub
eq
pop local 5
push local 1
push constant 0
eq
pop local 6
push local 1
push this 1
push constant 1
sub
eq
pop local 7
push local 4
push local 5
or
push local 6
or
push local 7
or
pop local 8
push local 0
push this 3
add
pop pointer 1
push that 0
pop local 2
push local 1
push local 2
add
pop pointer 1
push that 0
pop local 3
push local 3
call Cell.determineNextLiveState 1
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 0
label WHILE_EXP2
push local 0
push this 2
lt
not
if-goto WHILE_END2
push constant 0
pop local 1
label WHILE_EXP3
push local 1
push this 1
lt
not
if-goto WHILE_END3
push local 0
push this 3
add
pop pointer 1
push that 0
pop local 2
push local 1
push local 2
add
pop pointer 1
push that 0
pop local 3
push local 3
call Cell.advance 1
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP3
label WHILE_END3
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP2
label WHILE_END2
push constant 0
return
function Board.dispose 3
push argument 0
pop pointer 0
push constant 0
pop local 1
label WHILE_EXP0
push local 1
push this 2
lt
not
if-goto WHILE_END0
push constant 0
pop local 2
label WHILE_EXP1
push local 2
push this 1
lt
not
if-goto WHILE_END1
push local 1
push this 3
add
pop pointer 1
push that 0
pop local 0
push local 2
push local 0
add
pop pointer 1
push that 0
call Memory.dealloc 1
pop temp 0
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP1
label WHILE_END1
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push this 3
call Memory.deAlloc 1
pop temp 0
push local 0
call Memory.deAlloc 1
pop temp 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
